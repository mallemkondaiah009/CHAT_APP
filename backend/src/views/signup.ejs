<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Judas - Professional Chat Platform</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        * {
            font-family: 'Inter', sans-serif;
        }

        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .glass-effect {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .notification {
            animation: slideDown 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), 
                       slideUp 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) 4.6s;
        }

        @keyframes slideDown {
            from { 
                opacity: 0; 
                transform: translateY(-30px) scale(0.95); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }

        @keyframes slideUp {
            from { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
            to { 
                opacity: 0; 
                transform: translateY(-30px) scale(0.95); 
            }
        }

        .feature-icon {
            transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        .feature-item:hover .feature-icon {
            transform: translateY(-2px) scale(1.05);
        }

        .input-group {
            position: relative;
        }

        .floating-label {
            position: absolute;
            left: 16px;
            top: 16px;
            transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            pointer-events: none;
            color: #6b7280;
            font-size: 16px;
        }

        .form-input:focus + .floating-label,
        .form-input:not(:placeholder-shown) + .floating-label {
            top: 8px;
            font-size: 12px;
            color: #667eea;
            font-weight: 500;
        }

        .form-input {
            padding: 20px 16px 8px 16px;
            transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        .form-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-1px);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            position: relative;
            overflow: hidden;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .logo-text {
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .pulse-dot {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .error-shake {
            animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97);
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        @media (max-width: 768px) {
            .split-container {
                flex-direction: column;
            }
            
            .left-panel {
                min-height: 40vh;
                padding: 2rem 1rem;
            }
            
            .right-panel {
                padding: 2rem 1rem;
            }
        }
    </style>
</head>
<body class="min-h-screen bg-gray-50">
    <!-- Notification Container -->
    <div id="notification-container" class="fixed top-6 left-1/2 transform -translate-x-1/2 z-50">
        <div id="error-message" class="hidden bg-white rounded-xl shadow-2xl p-4 max-w-sm border-l-4 border-red-500">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-red-800" id="error-text"></p>
                </div>
            </div>
        </div>
        
        <div id="success-message" class="hidden bg-white rounded-xl shadow-2xl p-4 max-w-sm border-l-4 border-green-500">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-green-800" id="success-text">Signup successful! Redirecting to login...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Container -->
    <div class="split-container flex min-h-screen">
        <!-- Left Panel - Branding -->
        <div class="left-panel gradient-bg flex-1 flex flex-col justify-center items-center p-12 relative overflow-hidden">
            <!-- Background Decoration -->
            <div class="absolute inset-0 opacity-10">
                <div class="absolute top-10 left-10 w-32 h-32 bg-white rounded-full"></div>
                <div class="absolute bottom-10 right-10 w-24 h-24 bg-white rounded-full"></div>
                <div class="absolute top-1/2 left-20 w-16 h-16 bg-white rounded-full"></div>
            </div>

            <div class="relative z-10 text-center max-w-md">
                <!-- Logo -->
                <div class="mb-8">
                    <h1 class="logo-text text-6xl font-bold mb-4">Judas</h1>
                    <p class="text-white/90 text-lg font-light">Professional Chat Platform</p>
                </div>

                <!-- Features -->
                <div class="space-y-6 mb-8">
                    <div class="feature-item flex items-center text-white/90 hover:text-white transition-colors">
                        <div class="feature-icon w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center mr-4">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                            </svg>
                        </div>
                        <div>
                            <h3 class="font-semibold">Real-time Messaging</h3>
                            <p class="text-sm text-white/70">Instant communication with your team</p>
                        </div>
                    </div>

                    <div class="feature-item flex items-center text-white/90 hover:text-white transition-colors">
                        <div class="feature-icon w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center mr-4">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                            </svg>
                        </div>
                        <div>
                            <h3 class="font-semibold">Media Sharing</h3>
                            <p class="text-sm text-white/70">Share images and files seamlessly</p>
                        </div>
                    </div>

                    <div class="feature-item flex items-center text-white/90 hover:text-white transition-colors">
                        <div class="feature-icon w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center mr-4">
                            <div class="flex items-center space-x-1">
                                <div class="w-2 h-2 bg-green-400 rounded-full pulse-dot"></div>
                                <div class="w-2 h-2 bg-white/60 rounded-full"></div>
                            </div>
                        </div>
                        <div>
                            <h3 class="font-semibold">Live Status</h3>
                            <p class="text-sm text-white/70">See who's online in real-time</p>
                        </div>
                    </div>
                </div>

                <div class="text-white/60 text-sm">
                    Join thousands of teams already using Judas
                </div>
            </div>
        </div>

        <!-- Right Panel - Signup Form -->
        <div class="right-panel flex-1 flex items-center justify-center p-12 bg-gray-50">
            <div class="w-full max-w-md">
                <div class="glass-effect rounded-2xl p-8 shadow-2xl">
                    <div class="text-center mb-8">
                        <h2 class="text-3xl font-bold text-gray-900 mb-2">Create Account</h2>
                        <p class="text-gray-600">Join the future of team communication</p>
                    </div>

                    <form id="signupForm" class="space-y-6">
                        <!-- Full Name -->
                        <div class="input-group">
                            <input 
                                type="text" 
                                id="fullName" 
                                name="fullName" 
                                class="form-input w-full border border-gray-200 rounded-xl bg-white/70 placeholder-transparent focus:outline-none" 
                                placeholder="Full Name"
                                required
                            >
                            <label for="fullName" class="floating-label">Full Name</label>
                            <div id="fullName-error" class="text-red-500 text-sm mt-2 hidden flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                                </svg>
                                <span id="fullName-error-text"></span>
                            </div>
                        </div>

                        <!-- Email -->
                        <div class="input-group">
                            <input 
                                type="email" 
                                id="email" 
                                name="email" 
                                class="form-input w-full border border-gray-200 rounded-xl bg-white/70 placeholder-transparent focus:outline-none" 
                                placeholder="Email Address"
                                required
                            >
                            <label for="email" class="floating-label">Email Address</label>
                            <div id="email-error" class="text-red-500 text-sm mt-2 hidden flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                                </svg>
                                <span id="email-error-text"></span>
                            </div>
                        </div>

                        <!-- Password -->
                        <div class="input-group">
                            <input 
                                type="password" 
                                id="password" 
                                name="password" 
                                class="form-input w-full border border-gray-200 rounded-xl bg-white/70 placeholder-transparent focus:outline-none" 
                                placeholder="Password"
                                required
                            >
                            <label for="password" class="floating-label">Password</label>
                            <div id="password-error" class="text-red-500 text-sm mt-2 hidden flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                                </svg>
                                <span id="password-error-text"></span>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <button 
                            type="submit" 
                            id="submitBtn"
                            class="btn-primary w-full text-white font-semibold py-4 px-6 rounded-xl focus:outline-none focus:ring-4 focus:ring-blue-200 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <span id="btn-text">Create Account</span>
                            <span id="btn-loader" class="hidden">
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Creating Account...
                            </span>
                        </button>
                    </form>

                    <!-- Login Link -->
                    <div class="text-center mt-8 pt-6 border-t border-gray-200">
                        <p class="text-gray-600">
                            Already have an account? 
                            <a href="/login/" class="font-semibold text-blue-600 hover:text-blue-700 transition-colors">Sign in</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const form = document.getElementById('signupForm');
        const errorMessage = document.getElementById('error-message');
        const successMessage = document.getElementById('success-message');
        const errorText = document.getElementById('error-text');
        const successText = document.getElementById('success-text');
        const fullNameError = document.getElementById('fullName-error');
        const emailError = document.getElementById('email-error');
        const passwordError = document.getElementById('password-error');
        const fullNameErrorText = document.getElementById('fullName-error-text');
        const emailErrorText = document.getElementById('email-error-text');
        const passwordErrorText = document.getElementById('password-error-text');
        const fullNameInput = document.getElementById('fullName');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const submitBtn = document.getElementById('submitBtn');
        const btnText = document.getElementById('btn-text');
        const btnLoader = document.getElementById('btn-loader');

        let notificationTimeout = null;

        function showNotification(element, textElement, message) {
            if (notificationTimeout) {
                clearTimeout(notificationTimeout);
            }
            
            // Hide all notifications first
            errorMessage.classList.add('hidden');
            successMessage.classList.add('hidden');
            
            // Set message and show notification
            textElement.textContent = message;
            element.classList.remove('hidden');
            element.classList.add('notification');
            
            notificationTimeout = setTimeout(() => {
                element.classList.add('hidden');
                element.classList.remove('notification');
            }, 5000);
        }

        function setLoading(loading) {
            if (loading) {
                submitBtn.disabled = true;
                btnText.classList.add('hidden');
                btnLoader.classList.remove('hidden');
            } else {
                submitBtn.disabled = false;
                btnText.classList.remove('hidden');
                btnLoader.classList.add('hidden');
            }
        }

        function showFieldError(errorElement, textElement, inputElement, message) {
            textElement.textContent = message;
            errorElement.classList.remove('hidden');
            inputElement.classList.add('border-red-500', 'error-shake');
            setTimeout(() => {
                inputElement.classList.remove('error-shake');
            }, 500);
        }

        function clearFieldError(errorElement, inputElement) {
            errorElement.classList.add('hidden');
            inputElement.classList.remove('border-red-500');
        }

        // Clear errors on input
        fullNameInput.addEventListener('input', () => clearFieldError(fullNameError, fullNameInput));
        emailInput.addEventListener('input', () => clearFieldError(emailError, emailInput));
        passwordInput.addEventListener('input', () => clearFieldError(passwordError, passwordInput));

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Reset all error states
            clearFieldError(fullNameError, fullNameInput);
            clearFieldError(emailError, emailInput);
            clearFieldError(passwordError, passwordInput);
            errorMessage.classList.add('hidden');
            successMessage.classList.add('hidden');

            const fullName = fullNameInput.value.trim();
            const email = emailInput.value.trim();
            const password = passwordInput.value.trim();

            // Client-side validation
            let hasError = false;
            
            if (fullName.length < 2) {
                showFieldError(fullNameError, fullNameErrorText, fullNameInput, 'Full name must be at least 2 characters');
                hasError = true;
            }
            
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                showFieldError(emailError, emailErrorText, emailInput, 'Please enter a valid email address');
                hasError = true;
            }
            
            if (password.length < 6) {
                showFieldError(passwordError, passwordErrorText, passwordInput, 'Password must be at least 6 characters');
                hasError = true;
            }
            
            if (hasError) return;

            setLoading(true);

            try {
                // Try different payload variations to match API expectations
                const payloads = [
                    { fullName, email, password },
                    { name: fullName, email, password },
                    { username: fullName, email, password }
                ];

                let response, data;
                for (const payload of payloads) {
                    console.log('Trying payload:', payload);
                    response = await fetch('https://judas-dsaj.onrender.com/api/auth/signup', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(payload)
                    });
                    data = await response.json();
                    console.log('API Response:', response.status, data);

                    if (response.ok) {
                        showNotification(successMessage, successText, 'Account created successfully! Redirecting to login...');
                        form.reset();
                        setTimeout(() => {
                            window.location.href = '/login/';
                        }, 2000);
                        return;
                    }
                    
                    // If the error isn't about missing fields, break to show the error
                    if (!data.message || !data.message.toLowerCase().includes('all fields are required')) {
                        break;
                    }
                }

                // Handle API errors
                if (data.fullName || data.name || data.username) {
                    const errorMsg = (data.fullName || data.name || data.username);
                    const message = Array.isArray(errorMsg) ? errorMsg.join(', ') : errorMsg;
                    showFieldError(fullNameError, fullNameErrorText, fullNameInput, message);
                }
                
                if (data.email) {
                    const message = Array.isArray(data.email) ? data.email.join(', ') : data.email;
                    showFieldError(emailError, emailErrorText, emailInput, message);
                }
                
                if (data.password) {
                    const message = Array.isArray(data.password) ? data.password.join(', ') : data.password;
                    showFieldError(passwordError, passwordErrorText, passwordInput, message);
                }
                
                if (data.message || data.detail) {
                    showNotification(errorMessage, errorText, data.message || data.detail);
                    
                    // Highlight all fields if "all fields are required"
                    if ((data.message || data.detail || '').toLowerCase().includes('all fields are required')) {
                        fullNameInput.classList.add('border-red-500');
                        emailInput.classList.add('border-red-500');
                        passwordInput.classList.add('border-red-500');
                    }
                } else {
                    showNotification(errorMessage, errorText, 'Signup failed. Please try again.');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                showNotification(errorMessage, errorText, 'Network error. Please check your connection and try again.');
            } finally {
                setLoading(false);
            }
        });
    </script>
</body>
</html>