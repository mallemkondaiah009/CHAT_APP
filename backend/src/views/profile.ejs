<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
        }

        .profile-card {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275), box-shadow 0.3s ease;
        }

        .profile-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
        }

        .profile-pic-container {
            position: relative;
            display: inline-block;
        }

        .pencil-icon {
            position: absolute;
            top: -4px;
            right: -4px;
            background: linear-gradient(45deg, #3b82f6, #60a5fa);
            border-radius: 50%;
            padding: 6px;
            opacity: 0;
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .profile-pic-container:hover .pencil-icon {
            opacity: 1;
            transform: scale(1.1);
        }

        .profile-pic {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 3px solid #ffffff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .profile-pic:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
        }

        .notification {
            position: fixed;
            top: 16px;
            left: 50%;
            transform: translateX(-50%);
            width: 100%;
            max-width: 380px;
            z-index: 1000;
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(-50%) translateY(0);
            opacity: 1;
        }

        .notification.hidden {
            transform: translateX(-50%) translateY(-20px);
            opacity: 0;
        }

        .spinner-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(6px);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            transition: opacity 0.3s ease;
        }

        .spinner {
            border: 6px solid rgba(255, 255, 255, 0.3);
            border-top: 6px solid #3b82f6;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .btn {
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(45deg, #3b82f6, #60a5fa);
        }

        .btn-primary:hover {
            background: linear-gradient(45deg, #2563eb, #3b82f6);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #ef4444, #f87171);
        }

        .btn-secondary:hover {
            background: linear-gradient(45deg, #dc2626, #ef4444);
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center">
    <div class="container max-w-lg mx-auto p-6">
        <div class="profile-card bg-white rounded-3xl shadow-xl p-10 text-center relative">
            <div id="notification-container" class="notification hidden">
                <p id="error-message" class="bg-red-600 text-white px-5 py-3 rounded-xl text-sm shadow-md hidden"></p>
                <p id="success-message" class="bg-green-600 text-white px-5 py-3 rounded-xl text-sm shadow-md hidden"></p>
            </div>
            <div id="spinner" class="spinner-container hidden">
                <div class="spinner"></div>
            </div>
            <div class="profile-pic-container">
                <img id="profile-pic" src="" alt="Profile Picture" class="profile-pic w-28 h-28 rounded-full object-cover mb-6 mx-auto" style="display: none;">
                <svg id="pencil-icon" class="pencil-icon w-5 h-5 text-white cursor-pointer" onclick="document.getElementById('profile-pic-upload').click()" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                </svg>
            </div>
            <h2 id="full-name" class="text-3xl font-bold text-gray-900 mb-3">Loading...</h2>
            <p id="email" class="text-gray-600 text-lg mb-8">Loading...</p>
            <input type="file" id="profile-pic-upload" accept="image/*" class="hidden" onchange="uploadProfilePic()">
            <div class="flex justify-center gap-4">
                <a href="/home" class="btn btn-primary text-white px-8 py-3 rounded-xl">Back to Home</a>
                <button onclick="logout()" class="btn btn-secondary text-white px-8 py-3 rounded-xl">Logout</button>
            </div>
        </div>
    </div>

    <script>
        // Function to show and hide notifications
        function showNotification(element, message) {
            element.textContent = message;
            element.style.display = 'block';
            element.parentElement.classList.remove('hidden');
            element.parentElement.classList.add('show');
            setTimeout(() => {
                element.parentElement.classList.remove('show');
                element.parentElement.classList.add('hidden');
                element.style.display = 'none';
            }, 5000);
        }

        // Fetch user data on page load
        window.onload = async () => {
            try {
                console.log('Fetching user data...');
                const response = await fetch('https://judas-dsaj.onrender.com/api/auth/check', {
                    method: 'GET',
                    credentials: 'include'
                });
                if (!response.ok) {
                    throw new Error(`Failed to fetch user data: ${response.status}`);
                }
                const user = await response.json();
                console.log('User data:', user);
                
                // Update DOM with user data
                document.getElementById('full-name').textContent = user.fullName || 'No Name';
                document.getElementById('email').textContent = user.email || 'No Email';
                
                // Handle profile picture
                const profilePic = document.getElementById('profile-pic');
                if (user.profilePic) {
                    profilePic.src = user.profilePic;
                    profilePic.style.display = 'block';
                } else {
                    profilePic.src = 'https://via.placeholder.com/100?text=No+Image';
                    profilePic.style.display = 'block';
                }
            } catch (error) {
                console.error('Error fetching user:', error);
                showNotification(document.getElementById('error-message'), 'Error loading profile: ' + error.message);
            }
        };

        // Trigger file input on image click
        document.getElementById('profile-pic').addEventListener('click', () => {
            document.getElementById('profile-pic-upload').click();
        });

        // Upload profile picture
        async function uploadProfilePic() {
            console.log('File selected, uploading...');
            const fileInput = document.getElementById('profile-pic-upload');
            const errorMessage = document.getElementById('error-message');
            const successMessage = document.getElementById('success-message');
            const profilePic = document.getElementById('profile-pic');
            const spinner = document.getElementById('spinner');

            if (!fileInput.files[0]) {
                console.warn('No file selected');
                showNotification(errorMessage, 'Please select an image to upload');
                return;
            }

            try {
                console.log('Reading file...');
                const file = fileInput.files[0];
                // Validate file size (2MB limit)
                if (file.size > 2 * 1024 * 1024) {
                    throw new Error('Image size exceeds 2MB limit');
                }
                
                // Show spinner
                spinner.style.display = 'flex';

                const reader = new FileReader();
                
                reader.onload = async () => {
                    const base64Image = reader.result;
                    console.log('Base64 image length:', base64Image.length);

                    try {
                        console.log('Sending update-profile request...');
                        const response = await fetch('https://judas-dsaj.onrender.com/api/auth/update-profile', {
                            method: 'PUT',
                            credentials: 'include',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ profilePic: base64Image })
                        });

                        // Hide spinner
                        spinner.style.display = 'none';

                        if (!response.ok) {
                            const errorData = await response.json();
                            console.error('Update profile error:', errorData);
                            throw new Error(errorData.message || `Failed to upload profile picture: ${response.status}`);
                        }

                        const updatedUser = await response.json();
                        console.log('Updated user:', updatedUser);

                        // Update profile picture in DOM
                        if (updatedUser.profilePic) {
                            profilePic.src = updatedUser.profilePic;
                            profilePic.style.display = 'block';
                        }
                        showNotification(successMessage, 'Profile picture updated successfully!');
                        fileInput.value = ''; // Clear file input
                    } catch (error) {
                        console.error('Upload request error:', error);
                        spinner.style.display = 'none';
                        showNotification(errorMessage, 'Error uploading picture: ' + error.message);
                    }
                };

                reader.onerror = () => {
                    console.error('FileReader error');
                    spinner.style.display = 'none';
                    showNotification(errorMessage, 'Error reading image file');
                };

                reader.readAsDataURL(file);
            } catch (error) {
                console.error('Upload setup error:', error);
                spinner.style.display = 'none';
                showNotification(errorMessage, 'Error uploading picture: ' + error.message);
            }
        }

        // Logout function
        async function logout() {
            console.log('Logout button clicked');
            const errorMessage = document.getElementById('error-message');
            try {
                const response = await fetch('https://judas-dsaj.onrender.com/api/auth/logout', {
                    method: 'POST',
                    credentials: 'include'
                });
                if (!response.ok) {
                    throw new Error(`Logout failed: ${response.status}`);
                }
                console.log('Logout successful, redirecting...');
                window.location.href = '/login';
            } catch (error) {
                console.error('Logout error:', error);
                showNotification(errorMessage, 'Error logging out: ' + error.message);
            }
        }
    </script>
</body>
</html>